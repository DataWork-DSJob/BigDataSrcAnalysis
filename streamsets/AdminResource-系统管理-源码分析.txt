/rest/v1/system/shutdown		AdminResource.shutdown()		停止流并关闭DC系统
/rest/v1/system/restart			AdminResource.restart()			停流,重新新配置,并重启流;



// 1. 容器的停止 
/** 停止所有流,并关闭DC进程;  AdminResource.shutdown()-> PipelineTask.stop() -> CompositeTask.stopTask() -> 8大SubTask的 task.stop()
* 		- StandaloneAndClusterPipelineManager.stop()
			* for (RunnerInfo runnerInfo : runnerCache.asMap().values()) { runnerInfo.runner[StandaloneRunner or ClusterRunner].close()} 停止并持久化每个Pipeline
			* runnerCache[Cache<String, RunnerInfo>].invalidateAll(); 		清除内存;
			* runnerExpiryFuture.cancel(true); 		取消正在重试的任务;
 		- WebServerTask.stop
		- CachePipelineStoreTask.stop()
		
* 其他相关代码: Main.doMain() -> shutdownHookThread = new Thread{ run(){ task[TaskWrapper].stop(){}}}.start();
*/

AdminResource.shutdown(){
	Thread thread = new Thread("Shutdown Request") {
		@Override public void run() {
			// sleeping  500ms to allow the HTTP response to go back: 等待0.5秒以返回http.OK;
			ThreadUtil.sleep(500);
			runtimeInfo[RuntimeInfo].shutdown(0){
				
				Main.doMain(){
					Thread shutdownHookThread = new Thread("Main.shutdownHook") {
						@Override public void run() {
							task[TaskWrapper[PipelineTask]].stop();
						}
					}
					getRuntime().addShutdownHook(shutdownHookThread);
					ShutdownHandler runnable = new ShutdownHandler(finalLog, task, shutdownStatus);
					
				}
				// 关于shutdownRunnable:ShutdownHandler, 详见以上代码
				if(shutdownRunnable !=null){
					shutdownRunnable[ShutdownHandler].run(){
						task[TaskWrapper[PipelineTask]].stop(){ // PipelineTask.stop()-> AbstractTask.stop()
							Preconditions.checkState(VALID_TRANSITIONS.get(getStatus()).contains(Status.STOPPED),"errorMessage");
							
							if (getStatus() != Status.STOPPED) {
								safeStop(Status.STOPPED){// AbstractTask.safeStop(){
									setStatus(endStatus = Status.STOPPED);
									stopTask(){ // 抽象方法,由 CompositeTask.stopTask()实现; 
										CompositeTask.stopTask(){
											// 遍历停止8大 Task; 重点是: Cache, PipelineMgr;
											for (initedTaskIndex--; initedTaskIndex >= 0; initedTaskIndex--) {
												
												subTasks[List<Task>].get(initedTaskIndex).stop(){
													AbstractTask.stop(){
														Preconditions.checkState(VALID_TRANSITIONS.get(getStatus()).contains(Status.STOPPED),"errorMessage");
														if(getStatus() != Status.STOPPED) {
															safeStop(Status.STOPPED){
																Status priorStatus = getStatus(){return status;};
																stopTask();// AbstractTask.stopTask() 为空代码;
																	/*  以上Task重写了 stopTask()方法;
																		- StandaloneAndClusterPipelineManager.stopTask()
																		- DataCollectorWebServerTask.stopTask()
																		- CachePipelineStoreTask.stopTask()
																		- ClassLoaderStageLibraryTask.stopTask()
																	*/	
															}
														}
													}
												}
											}
											
											//1. 重要stop步骤: PipelineMgr 
											StandaloneAndClusterPipelineManager.stop(){ 
												AbstractTask.stop() -> AbstractTask.safeStop() -> StandaloneAndClusterPipelineManager.stopTask(){
													// Cache<String, RunnerInfo> runnerCache = new MetricsCache<>();
													// 遍历每条Pipeline的Runner(StandaloneRunner/ClusterRunner), 执行其close(),onDataCollectorStop()方法
													// 依次保存和停止每天Pipeline任务流;
													for (RunnerInfo runnerInfo : runnerCache.asMap().values()) {
														/**看Pipeline是那种executionMode:[Standalone,ClusterOnYarn,ClusterOnMesos,ClusterBatch]
															* 若 Standalone, runner= StandaloneRunner 
															* 若 ClusterYarnStreaming, runner= ClusterRunner 
															* 若 ClusterMesosStreaming, runner= ClusterRunner 
															* Slave?
														*/
														Runner runner[AsyncRunner] = runnerInfo.runner;
														runner.close(){
															runner.close(){
																ClusterRunner.close(){boolean isClosed = true;} // 若集群模式
																StandaloneRunner.close(){boolean isClosed = true;} // 若Standalone模式;
															}
														}
														
														PipelineState pipelineState = pipelineStateStore.getState(runner.getName(), runner.getRev());
														
														runner[AsyncRunner].onDataCollectorStop(user){
															
															// 1. 若为ClusterRunner,
															runner[ClusterRunner].onDataCollectorStop(user){
																ClusterRunner.stopPipeline(user,isNodeShuttingDown=true){
																	if (isNodeShuttingDown) {
																		if (getState().getStatus() == PipelineStatus.RETRY) {
																			retryFuture.cancel(true);
																		}
																			
																		validateAndSetStateTransition[ClusterRunner](user, PipelineStatus.DISCONNECTED,message){
																			
																			// 状态检验 重要方法: ClusterRunner.validateAndSetStateTransition()
																			validateAndSetStateTransition[ClusterRunner](user, toStatus, message, attributes){
																				PipelineState fromState = getState();
																				
																				if (fromState.getStatus() == toStatus && toStatus != PipelineStatus.STARTING) {
																					// 当 fromStatus==toStatus,即不需要改变状态时, 仅打印日志Debug;
																					LOG.debug(Utils.format("Ignoring status '{}' as this is same as current status", fromState.getStatus()));
																				}else{
																					synchronized (this) {
																						fromState = getState();
																						checkState(Map.get(fromState).contains(toStatus), "errorMessage");
																						
																						// A. 当要切换成 Run_Error时, 情况SlaveMgr.slaveList中父节点信息;
																						if (toStatus == PipelineStatus.RUN_ERROR) {
																							handleErrorCallbackFromSlaves(attributes){
																								slaveCallbackManager.clearSlaveList(CallbackObjectType.ERROR);
																							}
																						}
																						
																						// B.当要切换成 Run_Error并需要重启时: 将状态设为 PipelineStatus.RETRY;
																						if (toStatus == PipelineStatus.RUN_ERROR && shouldRetry){
																							toStatus = PipelineStatus.RETRY;
																							checkState(VALID_TRANSITIONS.get(fromState.getStatus()).contains(PipelineStatus.RETRY), "");
																						}
																						
																						// 
																						if (toStatus==PipelineStatus.RETRY &&fromState.getStatus()!=PipelineStatus.CONNECTING) {
																							retryAttempt = fromState.getRetryAttempt() + 1;
																						}else if (!toStatus.isActive()) {
																							retryAttempt = 0;
																							nextRetryTimeStamp = 0;
																						}
																						
																						// 当非Active状态,或DISCONNECTED时: Edited,StartError,RunError,Finished,Killed,Stoped, StopError,DissConnect时;
																						// 注意, ConnectError, DisConnedted ,都算是active在线状态;
																						if (!toStatus.isActive()||toStatus==PipelineStatus.DISCONNECTED){
																							// 将Metricy转换成JsonStr用作 FilePipelineStateCache 持久化 ;
																							metricsJSONStr= metricsJSONStr = objectMapper.writer().writeValueAsString(getMetrics());
																						}
																						
																						pipelineState= pipelineStateStore[CachePipelineState].saveState(toStatus,metricsJSONStr){
																							PipelineState pipelineState = pipelineStateStore[FilePipelineStateCache].saveState(){
																								FilePipelineStateCache.register(name, rev);
																								
																								// 将Pipeline信息和状态 持久化(写入磁盘)
																								PipelineState pipelineState = new PipelineStateImpl(user, name, status, message);
																								FilePipelineStateCache.persistPipelineState(pipelineState){
																									PipelineStateJson pipelineStateJson = BeanHelper.wrapPipelineState(pipelineState);
																									pipelineString = ObjectMapperFactory.get().writeValueAsString(pipelineStateJson);
																									
																									// dataStore会在 data/runtimeInfo/pipelineId/0/ 目前下, 对 PipelineState.json, PipelineStateHistory.json 进行更新
																									DataStore dataStore = new DataStore(getPipelineStateFile(pipelineState.getPipelineId(), pipelineState.getRev()));
																									try (OutputStream os = dataStore.getOutputStream()) {
																										os.write(pipelineString.getBytes());
																										dataStore.commit(os);
																									}
																								}
																								
																							}
																							
																							// 将持久化的pipeline最新状态,保存到缓存;
																							pipelineStateCache.put(getNameAndRevString(name, rev), pipelineState);
																							return pipelineState;
																						}
																						
																						if (toStatus == PipelineStatus.RETRY) {
																							retryFuture = scheduleForRetries(user, runnerExecutor);
																						}
																						
																					}
																					
																					
																				}
																				
																			}
																		}
																		
																	}
																}
															}
															
															
															// 2. 若为StandaloneRunner,
															runner[StandaloneRunner extends AbstractRunner[implements Runner]].onDataCollectorStart(user){
																
																// 当还处重试状态时, 取消取消重启,停止任务运行;
																if (getState().getStatus() == PipelineStatus.RETRY){
																	retryFuture.cancel(true);
																	// 校验从当前状态(Retry)->DISCONNECTING的合法性, 并将 stateStore中缓存的状态更新和持久化为: DisConnecting;
																	validateAndSetStateTransition(user, PipelineStatus.DISCONNECTING, null, null);
																	// 校验DisConnecting -> DisConnedted,并更新缓存和磁盘状态为: DisConnedted
																	validateAndSetStateTransition(user, PipelineStatus.DISCONNECTED, "Disconnected as SDC is shutting down", null){
																		/* 校验状态 切换是否合法, 如何合法,则更新内存(pipelineStateStore)和磁盘中的状态;
																		*	- 
																		*/
																		Standalone.validateAndSetStateTransition(user,toStatus,message,attrs){
																			synchronized (this) {
																				fromState = getState();
																				checkState(VALID_TRANSITIONS.get(fromState.getStatus()).contains(toStatus),"");
																				
																				if (toStatus==PipelineStatus.RETRY&&fromState.getStatus()!=PipelineStatus.CONNECTING) {
																					
																				}else if (!toStatus.isActive()) {
																					retryAttempt = 0;
																					nextRetryTimeStamp = 0;
																				}
																				
																				// 当 非active时 or DISCONNECTED or 重试状态 状态时,
																				if (!toStatus.isActive() || toStatus == PipelineStatus.DISCONNECTED 
																							|| (toStatus == PipelineStatus.RETRY && fromState.getStatus() != PipelineStatus.CONNECTING)) {
																						
																						metricString = objectMapper.writeValueAsString(metrics);
																						eventListenerManager.broadcastMetrics(name, metricString);
																				}
																				
																				pipelineState =pipelineStateStore.saveState(user, name, rev, toStatus, message);
																				
																			}
																			
																			eventListenerManager.broadcastStateChange(fromState,pipelineState,OffsetFileUtil.getOffsets(runtimeInfo, name, rev)){
																				if(stateEventListenerList.size() > 0) {
																					String toStateJson = objectMapper.writer().writeValueAsString(BeanHelper.wrapPipelineState(toState, true));
																					for(StateEventListener stateEventListener : stateEventListenerListCopy) {
																						stateEventListener.onStateChange(fromState, toState, toStateJson, threadUsage, offset);
																					}
																				}
																			}
																		}
																		
																	}
																}
																
																// 当 状态已经变为 非在线时: [Start/Run/Stop]__Error, [Finish/Killed/Stop]ed, +  DisConnected时, 不在线了,就知返回结束; 否则,代表还没停完
																if (!getState().getStatus().isActive()||getState().getStatus()==PipelineStatus.DISCONNECTED) {
																	LOG.info("Pipeline '{}'::'{}' is no longer active", name, rev);
																	return;
																}
																
																// 代码若进入此处, 表示还没停止完, 还处于: [Start/Run/Stop]_ing(or ingError), Retry, Connecting + DisConnecting 状态; 需要强行关闭?
																LOG.info("Stopping pipeline {}::{}", name, rev);
																	* 
																
																try {
																	validateAndSetStateTransition(user, PipelineStatus.DISCONNECTING, "");
																} catch (PipelineRunnerException ex) {
																	LOG.warn("Cannot transition to PipelineStatus.DISCONNECTING: {}", ex.toString(), ex);
																}
																
																// 结束整个进程 ? 
																stopPipeline(true /* shutting down node process */){
																	ProductionPipelineRunnable pipelineRunnable;//里面封装了ProductionPipeline 
																	if (pipelineRunnable != null && !pipelineRunnable.isStopped()) {
																		LOG.info("Stopping pipeline {} {}", pipelineRunnable.getName(), pipelineRunnable.getRev());
																			* 
																		
																		pipelineRunnable.stop(sdcShutting);
																		pipelineRunnable = null;
																	}
																	if (metricsEventRunnable != null) {
																		metricsEventRunnable.onStopPipeline();
																		metricsEventRunnable = null;
																	}
																	if (threadHealthReporter != null) {
																		threadHealthReporter.destroy();
																		threadHealthReporter=null;
																	}
																}
																
															}
															
														}
													}
														* INFO  StandaloneRunner - Pipeline 'HJQKafkaStandaloneTestRemoteDebuge97c188a-eb98-426a-adf4-eec4b7cf527b'::'0' is no longer active
														* INFO  StandaloneRunner - Pipeline 'HeJiaQingAllProcessTestv003by08280f1dcb20-738f-4f00-9396-c8c32ea2b382'::'0' is no longer active
													
													// 清空存储PipelineRunner信息的Cache
													runnerCache[Cache<String, RunnerInfo>].invalidateAll();
													
													for (Previewer previewer : previewerCache.asMap().values()){
														previewer.stop();
													}
													previewerCache.invalidateAll();// 清除previewerCache
													
													runnerExpiryFuture.cancel(true);
													LOG.info("Stopped Production Pipeline Manager");
														* INFO  StandaloneAndClusterPipelineManager - Stopped Production Pipeline Manager
													
												}
											}
											
											// 2. 关闭WebServer
											DataCollectorWebServerTask.stop(){
												AbstractTask.stop() -> AbstractTask.safeStop() -> WebServerTask.stopTask(){
													server[Server].stop(){
														doStop();
													}
												}
											}
																				
											// 3. 重要stop步骤: 清空CachePipelineStoreTask和FilePipelineStateStore中的缓存的 pipelineInfos数据;
											CachePipelineStoreTask.stop(){
												pipelineStore[FilePipelineStoreTask].stop(){
													AbstractTask.stop() -> AbstractTask.safeStop() -> FilePipelineStoreTask.stopTask(){
														if (pipelineStateStore[CachePipelineStateStore] != null) {
															pipelineStateStore[CachePipelineStateStore].destroy(){
																// 清除所有缓存的pipelineInfo信息,缓存清空;
																pipelineStateCache[LocalCache<String, PipelineInfo>].invalidateAll();
																
																pipelineStateStore[FilePipelineStateStore].destroy(){}; // FilePipelineStateStore.destroy()为空;
															}
														}
													}
												}
												
												// 清空CachePipelineStoreTask中缓存的 pipelineInfo数据;
												pipelineInfoMap[Map<pipelineId,PipelineInfo>].clear();
											}
											
											
											ClassLoaderStageLibraryTask.stop(){
												AbstractTask.stop() -> AbstractTask.safeStop() -> ClassLoaderStageLibraryTask.stopTask(){
													privateClassLoaderPool[GenericKeyObjectPool].close();//情况cl池中的对象;
													super.stopTask();
												}
											}
											
										}
									}
								}
							}
						
						}
					}
				}
				
				// 备注: RuntimeInfo.shutdownRunnable = Main.doMain()
			}
		}
	};
	
	thread.start();
	return Response.ok().build();
}



/**
*
*
*/

AdminResource.restart(){
	new Thread(){@Override public void run(){
		ThreadUtil.sleep(500); // 等待0.5秒,让http先返回;
		runtimeInfo[StandaloneRuntimeInfo extends RuntimeInfo].shutdown(status=88){ // RuntimeInfo.shutdown()
			if (shutdownRunnable != null) {
				shutdownRunnable.setExistStatus(status);
				shutdownRunnable[ShutdownHandler].run(){
					task[TaskWrapper[PipelineTask]].stop();
						-> CompositeTask.stopTask(): 遍历8大SubTask, 并subTask.stop();
					
				}
			}
		}
		
	}}.setDaemon(true).start();
	
	
	exitStatus = new DataCollectorMain().doMain();// DC正常停止后exitStatus对应两个值: 88(restart), 0(shutdown), 1(ZKHA异常退出);
	System.exit(exitStatus);
	
}


